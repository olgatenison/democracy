// lib/contentful.js
import { createClient } from "contentful";

export const client = createClient({
  space: process.env.CONTENTFUL_SPACE_ID,
  accessToken: process.env.CONTENTFUL_DELIVERY_TOKEN,
});

export async function getHero(locale) {
  const contentfulLocale = locale === "en" ? "en-US" : "ru";

  try {
    const response = await client.getEntries({
      content_type: "hero",
      locale: contentfulLocale,
      include: 2,
    });

    const item = response.items[0];

    return {
      title: item.fields.heroTitle,
      subtitle: item.fields.heroSubtitle,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤ –ì–µ—Ä–æ–µ:", error);
    return null;
  }
}

export async function getAbout(locale) {
  const contentfulLocale = locale === "en" ? "en-US" : "ru";

  try {
    const response = await client.getEntries({
      content_type: "about",
      locale: contentfulLocale,
      include: 2, // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    });

    const item = response.items[0];

    return {
      title: item.fields.aboutTitle,
      subtitle: item.fields.aboutSubtitle,
      text: item.fields.aboutText,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ –Ω–∞—Å:", error);
    return null;
  }
}

export async function getManagingDirector(locale) {
  const contentfulLocale = locale === "en" ? "en-US" : "ru";

  try {
    const response = await client.getEntries({
      content_type: "managingDirector", // üëà –Ω–∞–∑–≤–∞–Ω–∏–µ content type
      locale: contentfulLocale,
    });

    const item = response.items[0]; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –æ–¥–Ω–∞

    return {
      title: item.fields.directorTitle,
      subtitle: item.fields.directorSubtitle,
      name: item.fields.name,
      position: item.fields.directorPosition,
      photo: item.fields.photo.fields.file.url.startsWith("//")
        ? "https:" + item.fields.photo.fields.file.url
        : item.fields.photo.fields.file.url,
      textFirst: item.fields.directorTextFirst,
      textSecond: item.fields.directorTextSecond,
      textThird: item.fields.directorTextThird,
      telegramLink: item.fields.directorTelegramLink,
      youtubeLink: item.fields.directorYoutubeLink,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞:", error);
    return null;
  }
}

export async function getPublications(locale) {
  const contentfulLocale = locale === "en" ? "en-US" : "ru";

  try {
    const response = await client.getEntries({
      content_type: "publications",
      locale: contentfulLocale,
      include: 2, // –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
    });

    const item = response.items[0];

    return {
      title: item.fields.publicationsTitle,
      subtitle: item.fields.publicationsSubtitle,
      articles: item.fields.articleList.map((article) => ({
        id: article.sys.id,
        name: article.fields.acticleName,
        press: article.fields.articlePress,
        link: article.fields.acticleLink,
      })),
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:", error);
    return null;
  }
}

export async function getDonation(locale) {
  const contentfulLocale = locale === "en" ? "en-US" : "ru";

  try {
    const response = await client.getEntries({
      content_type: "donation",
      locale: contentfulLocale,
      include: 2,
    });

    const item = response.items[0];

    return {
      title: item.fields.donationTitle,
      subtitle: item.fields.donationSubtitle,
      listTitle: item.fields.donationListTitle,
      listItem: item.fields.donationListItem,
      campaign: item.fields.donationCampaign,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ donation:", error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ—É—Ç–µ—Ä–∞
export async function getFooter(locale) {
  const contentfulLocale = locale === "en" ? "en-US" : "ru"; // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

  try {
    const response = await client.getEntries({
      content_type: "siteSettings", // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ Contentful
      locale: contentfulLocale, // –£–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å
    });

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ—É—Ç–µ—Ä–∞ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö
    return response.items.map((item) => ({
      footerText: item.fields.footerText,
      contactEmail: item.fields.contactEmail,
      address: item.fields.address,
      cryptoInfo: item.fields.cryptoInfo,
    }));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ñ—É—Ç–µ—Ä–∞:", error);
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}
